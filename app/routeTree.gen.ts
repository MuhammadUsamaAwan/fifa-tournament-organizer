/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as webLayoutImport } from './routes/(web)/_layout'
import { Route as authLayoutImport } from './routes/(auth)/_layout'
import { Route as webLayoutIndexImport } from './routes/(web)/_layout/index'
import { Route as authLayoutLoginImport } from './routes/(auth)/_layout/login'

// Create Virtual Routes

const webImport = createFileRoute('/(web)')()
const authImport = createFileRoute('/(auth)')()

// Create/Update Routes

const webRoute = webImport.update({
  id: '/(web)',
  getParentRoute: () => rootRoute,
} as any)

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const webLayoutRoute = webLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => webRoute,
} as any)

const authLayoutRoute = authLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => authRoute,
} as any)

const webLayoutIndexRoute = webLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => webLayoutRoute,
} as any)

const authLayoutLoginRoute = authLayoutLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_layout': {
      id: '/(auth)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutImport
      parentRoute: typeof authRoute
    }
    '/(web)': {
      id: '/(web)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof webImport
      parentRoute: typeof rootRoute
    }
    '/(web)/_layout': {
      id: '/(web)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof webLayoutImport
      parentRoute: typeof webRoute
    }
    '/(auth)/_layout/login': {
      id: '/(auth)/_layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLayoutLoginImport
      parentRoute: typeof authLayoutImport
    }
    '/(web)/_layout/': {
      id: '/(web)/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof webLayoutIndexImport
      parentRoute: typeof webLayoutImport
    }
  }
}

// Create and export the route tree

interface authLayoutRouteChildren {
  authLayoutLoginRoute: typeof authLayoutLoginRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLayoutLoginRoute: authLayoutLoginRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

interface authRouteChildren {
  authLayoutRoute: typeof authLayoutRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authLayoutRoute: authLayoutRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface webLayoutRouteChildren {
  webLayoutIndexRoute: typeof webLayoutIndexRoute
}

const webLayoutRouteChildren: webLayoutRouteChildren = {
  webLayoutIndexRoute: webLayoutIndexRoute,
}

const webLayoutRouteWithChildren = webLayoutRoute._addFileChildren(
  webLayoutRouteChildren,
)

interface webRouteChildren {
  webLayoutRoute: typeof webLayoutRouteWithChildren
}

const webRouteChildren: webRouteChildren = {
  webLayoutRoute: webLayoutRouteWithChildren,
}

const webRouteWithChildren = webRoute._addFileChildren(webRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof webLayoutIndexRoute
  '/login': typeof authLayoutLoginRoute
}

export interface FileRoutesByTo {
  '/': typeof webLayoutIndexRoute
  '/login': typeof authLayoutLoginRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_layout': typeof authLayoutRouteWithChildren
  '/(web)': typeof webRouteWithChildren
  '/(web)/_layout': typeof webLayoutRouteWithChildren
  '/(auth)/_layout/login': typeof authLayoutLoginRoute
  '/(web)/_layout/': typeof webLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login'
  id:
    | '__root__'
    | '/(auth)'
    | '/(auth)/_layout'
    | '/(web)'
    | '/(web)/_layout'
    | '/(auth)/_layout/login'
    | '/(web)/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authRoute: typeof authRouteWithChildren
  webRoute: typeof webRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  authRoute: authRouteWithChildren,
  webRoute: webRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)",
        "/(web)"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_layout"
      ]
    },
    "/(auth)/_layout": {
      "filePath": "(auth)/_layout.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_layout/login"
      ]
    },
    "/(web)": {
      "filePath": "(web)",
      "children": [
        "/(web)/_layout"
      ]
    },
    "/(web)/_layout": {
      "filePath": "(web)/_layout.tsx",
      "parent": "/(web)",
      "children": [
        "/(web)/_layout/"
      ]
    },
    "/(auth)/_layout/login": {
      "filePath": "(auth)/_layout/login.tsx",
      "parent": "/(auth)/_layout"
    },
    "/(web)/_layout/": {
      "filePath": "(web)/_layout/index.tsx",
      "parent": "/(web)/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
